# von chatgpt, läuft noch nicht, aber für die grafische oberfläche kann man hier gut nachlesen

import tkinter as tk
from tkinter import messagebox

class TurmeVonHanoi:
    def __init__(self, root, n):
        self.root = root
        self.n = n
        self.turme = {'A': {'scheiben': list(range(n, 0, -1)), 'breiten': [20] * n},
                      'B': {'scheiben': [], 'breiten': []},
                      'C': {'scheiben': [], 'breiten': []}}
        self.zugzahl = 0

        self.canvas = tk.Canvas(root, width=800, height=400)
        self.canvas.pack()

        self.draw_turme()

        self.selected_turm = None

        self.canvas.bind('<Button-1>', self.on_click)

    def draw_turme(self):
        self.canvas.delete('all')
        turm_hohe = 200
        turm_abstand = 200

        for turm, daten in self.turme.items():
            x = turm_abstand * (ord(turm) - ord('A') + 1)
            y = 300
            for i, (s, b) in enumerate(zip(daten['scheiben'], daten['breiten'])):
                self.canvas.create_rectangle(
                    x - b / 2,
                    y - i * turm_hohe / self.n,
                    x + b / 2,
                    y - (i + 1) * turm_hohe / self.n,
                    outline='black',
                    fill='gray'
                )

            # Draw the pole
            self.canvas.create_rectangle(
                x - daten['breiten'][0] / 2,
                y - turm_hohe,
                x + daten['breiten'][0] / 2,
                y,
                outline='black',
                fill='brown'
            )

        # Draw the move counter
        self.canvas.create_text(
            400,
            50,
            text=f"Züge: {self.zugzahl}",
            font=('Helvetica', 16),
            anchor='center'
        )

    def on_click(self, event):
        x, y = event.x, event.y

        for turm, daten in self.turme.items():
            x_turm = 200 * (ord(turm) - ord('A') + 1)
            y_turm = 300
            if (
                x_turm - 10 < x < x_turm + 10 and
                y_turm - 100 < y < y_turm
            ):
                if self.selected_turm is None:
                    if daten['scheiben']:
                        self.selected_turm = turm
                else:
                    if not daten['scheiben'] or daten['scheiben'][-1] < self.turme[self.selected_turm]['scheiben'][-1]:
                        moved_disk = self.turme[self.selected_turm]['scheiben'].pop()
                        self.turme[turm]['scheiben'].append(moved_disk)
                        self.turme[turm]['breiten'][moved_disk - 1] += 10  # Ändere die Breite nach dem Bewegen
                        self.zugzahl += 1
                        self.selected_turm = None
                        self.draw_turme()

                        if not self.turme['A']['scheiben'] and not self.turme['B']['scheiben']:
                            self.show_win_message()

                        return
                    else:
                        messagebox.showinfo('Ungültiger Zug', 'Die Scheibe kann nicht auf einen kleineren Stapel verschoben werden.')

    def show_win_message(self):
        messagebox.showinfo('Gewonnen!', f'Sie haben das Spiel gewonnen!\nBenötigte Züge: {self.zugzahl}')
        self.root.destroy()

def start_turme_von_hanoi(n):
    root = tk.Tk()
    root.title('Türme von Hanoi')
    game = TurmeVonHanoi(root, n)
    messagebox.showinfo('Spielregeln', 'Willkommen bei den Türmen von Hanoi!\nVerschieben Sie die Scheiben von Turm A nach Turm C. Größere Scheiben können nicht auf kleinere Scheiben platziert werden.')
    root.mainloop()

if __name__ == "__main__":
    start_turme_von_hanoi(3)  # Du kannst die Anzahl der Scheiben hier anpassen
